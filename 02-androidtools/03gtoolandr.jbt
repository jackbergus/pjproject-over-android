%% TODO obiettivo della tesi: crosscompilazione di pjsip per Android in Architettura ARM
%% TODO descrizione dell'archiettura del sistema operativo Android
\chapter{Utilizzo dei tool di Android}
\minitoc\mtcskip

\section{Primi passi con Android SDK ed installazione dell'emulatore}\label{sec:SDKStep}
Per iniziare, è opportuno scaricare e decomprimere l'SDK e l'NDK di Android
\url{http://developer.android.com/sdk/index.html}. In particolare l'SDK fornisce
le API per quanto riguarda le applicazioni Java ed i tool di sviluppo in genere
per gestire le macchine reali o gli emulatori gestiti dal server \tt{\small adb}
(\textsc{Android Debug Bridge}).
Per l'installazione di tali API, comunque necessarie per l'utilizzo dell'emulatore,
si fa riferimento all'applicazione:
%center
\tt{\small{android-sdk-linux/tools/android sdk}}
.%
verrà visualizzata un'interfaccia grafica dalla quale scegliere quali API
di sistema installare. D'ora in poi ci riferiremo ad \tt{\small{android-sdk-linux}}
come ad \tt{\small{ \d SDK}}.


Una volta ultimata questa procedura, si può passare all'installazione dell'emulatore.
Per prima cosa è necessario creare una sdcard virtuale tramite l'ausilio del programma
\tt{\small{mksdcard}}:
%center
\tt{\small{\d SDK/tools/mksdcard size outfile}}
.%
Su questa verrà montato il \it{filesystem} FAT32.
Se questa non verrà creata o comunque non verrà utilizzata per la macchina virtuale,
si renderà il \it{filesystem} della macchina emulata di sola lettura, per quanto
riguarda la creazione di nuovi files su di essa. 

Per la creazione di una macchina virtuale (\textsc{Android Virtual Device}), si utilizza invece il seguente binario:
%center
\tt{\small{\d SDK/tools/android create avd -n new\_machine\_name -t api -sdcard file}}
.%
dove il parametro \tt{\small{api}} serve per specificare quale versione di 
Android emulare all'interno della macchina. La procedura di creazione dell'\tt{\small{avd}}
può essere effettuata anche tramite interfaccia grafica, accessibile tramite
il comando \tt{\small{\d SDK/tools/android avd}}. Per ottenere invece l'elenco
di tutte le macchine virtuali che sono state create, è sufficiente 
lanciare l'applicazione precedente con argomento \tt{\small{list avd}},
mentre per visualizzare i device collegati ed attivi è necessario eseguire il seguente
programma:
%center
\tt{\small{\d SDK/platform-tools/adb devices}}
.%

È inoltre possibile rendere visibile un device Android non emulato ma reale
all'interno della lista degli eventuali dispositivi in esecuzione, sempre
ottenibile tramite il comando fornito in precedenza. Con l'\tt{\small adb}
è inoltre possibile, tramite il comando \tt{\small logcat}, accedere alle informazioni
di logging fornite dagli applicativi in genere, ed dei \it{service} di sistema
in particolare.

\section{Interazione con i device Android}\label{sec:intdevandroid}
L'interazione con i dispositivi Android è mediata dall'\tt{\small{adb}}. Questo
programma, che abbiamo già visto occuparsi in precedenza della lista dei dispositivi
attivi, può anche consentire il trasferimento dei files dal dispositivo dove è 
in esecuzione l'SDK all'emulatore (istruzione \tt{\small{push filereal fileemu}})
o viceversa (istruzione \tt{\small{pull fileemu filereal}}), dell'interazione
con la shell del dispositivo (\tt{\small shell}: a questo comando si possono far
eventualmente seguire le istruzioni da effettuare) o la visualizzazione del
file di logging (\tt{\small logcat}). Tutto ciò è possibile previa definizione
del nome del dispositivo con il quale interagire tramite il flag \tt{\small{-s}}.

Per effettuare queste operazioni più agilmente, ho ideato alcuni semplici script,
che sono comunque riportati in Appendice nella Sezione \vref{sec:scriintSDK}.

\subsection{Comunicazione tra due emulatori Android, all'interno della stessa macchia}\label{subsec:commtwoemu}
\it{L'analisi dei metodi di interazione degli emulatori è stata necessaria
in quanto, in un primo tempo, si credeva di poterli utilizzare per il testing
del driver audio}.

L'emulatore predispone, all'interno dell'ambiente di sviluppo da esso fornito, 
un'interfaccia di default per l'interazione con l'ambiente esterno, compreso 
l'accesso alla rete, con l'indirizzo di rete \tt{\small 10.0.2.15}; in 
particolare questa è un'interfaccia di rete 3G. Oltre all'indirizzo di loopback
standard (\tt{\small 127.0.0.1}), l'Emulatore prevede anche la possibilità 
di accedere al loopback della macchina ospite tramite l'indirizzo \tt{\small 10.0.2.2}.

%% TODO: parlare anche delle porte di adb e di come agisce come servore demone

Ogni istanza dell'emulatore predispone due porte all'intero del localhost della
macchina ospite, una con una cifra pari (utilizzata per la comunicazione Telnet
dalla macchina ospite: quest'ultima verrà utilizzata di seguito per interagire
con i processi di rete localizzati all'interno dell'emulatore), ed un'altra con 
cifra dispari per la comunicazione con il server \tt{\small adb} che gestisce 
l'interazione tra i dispositivi\footnote{\url{http://developer.android.com/tools/help/adb.html}.}.

Come programma Client/server per il testing della comunicazione, si è proceduto
ad utilizzare un semplice programma Client/Server, il cui codice è riportato 
all'interno dell'Appendice nella Sezione \vref{sec:cliserv}.

Utilizzando la comunicazione \it{telnet} sulla porta pari dell'emulatore detta 
sopra (nel caso d'esempio \tt{\small 5554}) tramite il comando:
%center
\tt{\small telnet localhost 5554}
.%
possiamo ottenere, tramite il comando \tt{\small help}, quali comandi possiamo 
utilizzare per interagire con il dispositivo. Li riporto di seguito:
%bash
Android console command help:

    help|h|?         print a list of commands
    event            simulate hardware events
    geo              Geo-location commands
    gsm              GSM related commands
    cdma             CDMA related commands
    kill             kill the emulator instance
    network          manage network settings
    power            power related commands
    quit|exit        quit control session
    redir            manage port redirections
    sms              SMS related commands
    avd              control virtual device execution
    window           manage emulator window
    qemu             QEMU-specific commands
    sensor           manage emulator sensors
.%
Possiamo quindi notare come, tramite il comando \tt{\small redir}, possiamo
effettuare la redirezione delle porte del dispositivo su quelle della macchina
ospite. In particolare eseguendo il comando:
%center
\tt{\small redir add tcp:12345:12345}
.%
un client in esecuzione sulla macchina reale può interagire con
un server in esecuzione sull'emulatore, oppure un client, all'interno di un
emulatore, può interagire con un altro server su di un altro emulatore, poiché può accedere
alla porta in questo modo rediretta sul localhost della macchina ospite.

Riporto di seguito le considerazioni da me effettuate prima di ottenere il risultato
di cui sopra:
%itemize
\item Avviando un server all'interno della macchina ospite in ascolto sulla 
	porta 12345 ed un client sull'emulatore che effettua una richiesta al 
	server 10.0.2.2:12345, ho notato come le richieste arrivino al server 
	come se il processo provenisse dalla macchina reale (in particolare, nella
	prova effettuata, provenivano dall'indirizzo/porta \tt{\small 127.0.0.1:45430}).
	Nelle prove effettuate, questa porta non coincideva con le due porte di
	default predisposte per l'emulatore sopra descritte.

\item Avviando un server all'interno della macchina emulata in ascolto sulla 
	porta 12345 ed un client sul quella "ospite", se si prova ad accedere 
	da quest'ultima al server con indirizzo \tt{\small 127.0.0.1:12345}, 
	si ottiene invece un Connection Refused. Utilizzando infatti il comando
	\tt{\small lsof -i :12345} per identificare se, all'interno della 
	macchina ospite, sia presente un processo con quella porta, non si trova
	alcun \tt{\small pid} che lo possegga.
	
	Accedendo invece alle altre due porte di default, la connessione viene
	accettata ma non arriva a destinazione sul server.

\item Se si disabilitano le interfacce di rete tramite la ``Modalità Aereo'',
	è sempre e comunque possibile accedere all'indirizzo di loopback all'interno
	del dispositivo: se così non fosse, non si renderebbe possibile la 
	comunicazione tra servizi che, in parte, avviene tramite socket locali.
.%

\section{NDK: Tool di cross-compilazione Android}\label{sec:NDKtool}
Tratteremo in questa sezione di cross-compilazione, ed in particolare dei tool
forniti da Android. In precedenza veniva utilizzata la toolchain 
\textsc{Sourcery CodeBench Lite for ARM EABI}, che tuttavia non contiene di 
di default né le librerie presenti all'interno dei dispositivi Android, né i 
file di inclusione deducibili dal suo Kernel.

In questa sede tuttavia discorreremo del tool di crosscompilazione NDK fornito
dalla stessa Google: il vantaggio principale di questa collezione di tool è quello di fornire 
sia le librerie, sia i file di include necessari alla cross-compilazione, senza
avere la necessità di cross-compilarle o di ottenerle da un altro dispositivo.

Questa tesi utilizza la versione di ``r8b'' di questi tool, che sono comunque
ottenibili dal seguente indirizzo internet:
%center
\url{http://dl.google.com/android/ndk/android-ndk-r8b-linux-x86.tar.bz2}
.%
Si deve sottolineare come solo alla versione 4.6 dei tool hanno provveduto
a fornire il riconoscimento dell'entry point \tt{\small \_start} anche se il
linking della sua definizione all'interno del binario \tt{\small crtbegin}, 
causa problemi nel riconoscimento dei simboli EABI.
In questa versione
 è tuttavia definito il simbolo \tt{\small{\_\_libc\_init}}, tramite il quale
 consentire l'inizializzazione della libreria. Si è ritenuto
necessario definire tale entry point in linguaggio Assembly, descritto all'interno
dell'Appendice nella Sezione \vref{sec:assstart}.

Anche se mostrerò come nel caso specifico dei device utilizzati non sia necessario
specificare dei flag di compilazione, 
questi  si rivelano necessari per l'esecuzione dei binari sull'emulatore, la cui
architettura è ARMv7-a. Per dispositivi con processori Cortex-A9 o similari quale il Galaxy Nexus, è 
possibile specifiare in fase di compilazione il flag 
\tt{\small -mcpu=cortex-a9 -mtune=cortex-a9}.

Per architetture ARMv5\footnote{Su alcuni dispositivi 
ARMv7 può essere utilizzato l'NDK senza argomenti aggiuntivi.}, possono
essere utilizzati i seguenti flag \parencite{slide:aporting}:
%bash
export CFLAGS += -march=armv5te -mtune=xscale -msoft-float\
		 -fpic -ffunction-sections -funwind-tables -fstack-protector \
		 -fno-exceptions -D__ARM_ARCH_5__ -D__ARM_ARCH_5T__ \
		 -D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__  -Wno-psabi -mthumb -Os \
		 -fomit-frame-pointer -fno-strict-aliasing -finline-limit=64 \
		 -DANDROID  -Wa,--noexecstack -O2 -mfpu=vfpv3-d16 -DNDEBUG -g 
.%

I flag per effettuare la compilazione verso architetture ARMv4 sono invece i seguenti:
%bash
GLOBAL_CFLAGS += \
	-march=armv4t -mcpu=arm920t -mtune=xscale \
	-msoft-float -fpic \
	-mthumb-interwork \
	-ffunction-sections \
	-funwind-tables \
	-fstack-protector \
	-fno-short-enums \
	-D__ARM_ARCH_4__ -D__ARM_ARCH_4T__ \
	-D__ARM_ARCH_5E__ -D__ARM_ARCH_5TE__ 
.%


%% [TODO: collegare i problemi con \_start]

\subsection{Utilizzo di altri tool di crosscompilazione}
\subsubsection{Crosstool-NG}
%% TODO: illustrare la storia di questo crosscompiler

Questo tool potrebbe essere veramente utile allo scopo di generare binari che 
non dipendano dalle librerie e dal linker disponibili all'interno del dispositivo
Android voluto: di fatti esso richiede unicamente di configurare quali versione 
dei tool utilizzare, quali il compilatore, e quale versione del Kernel Linux
utilizzare.  Faccio inoltre notare come sia consigliabile scegliere una
delle configurazioni presenti all'interno del folder \tt{\small \d crosstoolng-path/config},
in quanto versioni differenti dei tool da quelle riportate potrebbero causare
problemi di compilazione dei binari.

Si potrebbe tuttavia utilizzare questo strumento allo scopo di compilare binari
per una versione Android \it{off-the-shelf}, ma a questo punto si rivela necessario
specificare in quale percorso sia situato il linker dinamico ed in quale le librerie
di sistema. 

Bisogna inoltre sottolineare come tale \it{crosstool} non generi automaticamente 
il linker da utilizzare all'interno del dispositivo, che quindi necesiterebbe anch'esso
di essere cross-compilato.
%% TODO Metti gli argomenti del caso

\subsubsection{\tt{ndk-build}}\label{subsub:ndkbuild}
Lo NDK fornisce uno script, detto \tt{\small ndk-build}, il quale può automatizzare
le procedure di compilazione del codice nativo, del codice Java e predisporre
la compilazione delle AIDL. Questo è presente all'interno del percorso \tt{\small \d NDK},
e deve essere eseguito all'interno della cartella dove sono presenti i sorgenti.
Un esempio di strutturazione dei sorgenti per il progetto di NDK è fornito
all'interno del percorso \tt{\small \d NDK/samples}.

La compilazione della singola interfaccia AIDL in linguaggio Java è possibile 
tramite il tool omonimo fornito dallo SDK in:
%center
\tt{\small \d SDK/platform-tools}
.%
